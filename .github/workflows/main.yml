name: Build A15 Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE_URL:
        description: 'Samsung Kernel Source URL (.zip)'
        required: true
      TOOLCHAIN_URL:
        description: 'AOSP Clang Toolchain URL (.tar.gz)'
        required: true
      STOCK_BOOT_IMG_URL:
        description: 'Stock boot.img URL'
        required: true
      YOUR_NAME:
        description: 'Your developer name (no spaces)'
        required: true
        default: 'rhn_1k'

jobs:
  build:
    name: Build and Package Kernel
    runs-on: ubuntu-22.04

    steps:
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev python2
          sudo ln -sf /usr/bin/python2 /usr/bin/python

      - name: Download and Extract All Sources
        id: workspace
        run: |
          curl -L -o source.zip "${{ github.event.inputs.KERNEL_SOURCE_URL }}"
          unzip -q source.zip
          tar -xf Kernel.tar.gz
          if [ ! -d "kernel-5.10" ] || [ ! -d "kernel" ]; then
            echo "Error: The expected 'kernel-5.10' and 'kernel' directories were not found."
            exit 1
          fi
          
          mkdir -p toolchain
          curl -L "${{ github.event.inputs.TOOLCHAIN_URL }}" | tar -xz -C toolchain --strip-components=1
          
          git clone https://github.com/topjohnwu/Magisk.git magisk_tools
          
          echo "work_dir=$(realpath .)" >> $GITHUB_OUTPUT

      - name: Setup Environment Variables
        run: |
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_COMPAT=arm-linux-gnueabi-" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "PATH=${{ steps.workspace.outputs.work_dir }}/toolchain/bin:$PATH" >> $GITHUB_ENV

      - name: Configure, Patch, and Integrate KernelSU
        working-directory: ${{ steps.workspace.outputs.work_dir }}
        run: |
          # All commands run from the root directory now
          sed -i 's/if (!cmd)/if (!cmd)\n\t\tcmd = "recovery";\n\telse if (2 < 1)/' kernel-5.10/drivers/power/reset/reboot-mode.c
          echo "Recovery boot patch applied."

          chmod +x kernel-5.10/scripts/config
          DEFCONFIG_FILE="kernel-5.10/arch/arm64/configs/a15_00_defconfig"
          ./kernel-5.10/scripts/config --file $DEFCONFIG_FILE --set-val UH n --set-val RKP n --set-val KDP n --set-val SECURITY_DEFEX n --set-val INTEGRITY n
          ./kernel-5.10/scripts/config --file $DEFCONFIG_FILE --set-val KSU y
          
          echo "CONFIG_LOCALVERSION=\"-${{ github.event.inputs.YOUR_NAME }}\"" >> $DEFCONFIG_FILE
          echo "CONFIG_LOCALVERSION_AUTO=n" >> $DEFCONFIG_FILE

          echo "Setting up KernelSU (Base)..."
          # We need to be in the kernel-5.10 directory for setup.sh to work correctly
          (cd kernel-5.10 && curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -)

      - name: Build The Kernel
        working-directory: ${{ steps.workspace.outputs.work_dir }}
        run: |
          # Generate the main build config (from root)
          python2 kernel-5.10/scripts/gen_build_config.py --kernel-defconfig a15_00_defconfig --kernel-defconfig-overlays "entry_level.config" -m user -o out/target/product/a15/obj/KERNEL_OBJ/build.config
          
          # Set build environment variables (from root)
          export PLATFORM_VERSION=12
          export OUT_DIR="out/target/product/a15/obj/KERNEL_OBJ"
          export DIST_DIR="out/target/product/a15/obj/KERNEL_OBJ"
          export BUILD_CONFIG="out/target/product/a15/obj/KERNEL_OBJ/build.config"
          
          # Tell the build script to skip 'make mrproper'
          export SKIP_MRPROPER=1
          
          # Run the build script from the ROOT directory
          ./kernel/build/build.sh

      - name: Repack Boot Image and Upload
        working-directory: ${{ steps.workspace.outputs.work_dir }}
        run: |
          curl -L -o stock_boot.img "${{ github.event.inputs.STOCK_BOOT_IMG_URL }}"
          
          ./magisk_tools/build/tools/magiskboot unpack stock_boot.img
          
          KERNEL_IMAGE="out/target/product/a15/obj/KERNEL_OBJ/arch/arm64/boot/Image.gz"
          if [ ! -f "$KERNEL_IMAGE" ]; then
             echo "Error: Kernel Image.gz not found!"
             exit 1
          fi
          cp $KERNEL_IMAGE kernel
          
          ./magisk_tools/build/tools/magiskboot repack stock_boot.img
          
          mv new-boot.img "Patched-boot-A15-${{ github.event.inputs.YOUR_NAME }}.img"
          FILE_PATH=$(realpath "Patched-boot-A15-${{ github.event.inputs.YOUR_NAME }}.img")
          RESPONSE=$(curl -F "file=@${FILE_PATH}" -H "Authorization: Bearer E29ro0ueg1dXX7CHmJSdrO9puOTUMREk" https://upload.gofile.io/uploadFile)
          DOWNLOAD_PAGE=$(echo $RESPONSE | grep -o '"downloadPage": *"[^"]*"' | cut -d '"' -f 4)
          
          if [ -z "$DOWNLOAD_PAGE" ]; then 
            echo "Error: Could not get Gofile URL! Response was:"
            echo $RESPONSE
            exit 1
          fi
          
          echo "----------------------------------------------------------------"
          echo "Build successful. Download your flashable boot.img here: $DOWNLOAD_PAGE"
          echo "----------------------------------------------------------------"
