name: Build GKI Kernel with KernelSU-Next and Recovery Patch

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE_URL:
        description: 'Direct URL to your kernel source (.zip)'
        required: true
      YOUR_NAME:
        description: 'Your developer name (no spaces)'
        required: true
        default: 'rhn_1k'

jobs:
  build:
    name: Build and Package GKI Kernel
    runs-on: ubuntu-22.04

    steps:
      - name: Maximize Build Space by Cleaning Runner
        uses: rokibhasansagar/slimhub_actions@main
        
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 16

      - name: Download and Unpack Kernel Source
        id: source
        run: |
          sudo apt-get update && sudo apt-get install -y unzip git
          curl -L -o kernel_source.zip "${{ github.event.inputs.KERNEL_SOURCE_URL }}"
          unzip -q kernel_source.zip
          TOP_LEVEL_DIR=$(find . -mindepth 1 -maxdepth 1 -type d)
          echo "work_dir=$(realpath $TOP_LEVEL_DIR)" >> $GITHUB_OUTPUT

      - name: Integrate KernelSU-Next
        # CRITICAL FIX: Run this from the correct directory that contains 'kernel-5.10'
        working-directory: ${{ steps.source.outputs.work_dir }}
        run: |
          echo "Integrating KernelSU-Next into the kernel source..."
          # We pass the sub-directory 'kernel-5.10' to the script
          # so it knows where the actual kernel source is.
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/main/kernel/setup.sh" | bash -s -- -C kernel-5.10
          echo "KernelSU-Next integrated successfully."

      - name: Apply Patches and Personalize
        working-directory: ${{ steps.source.outputs.work_dir }}
        run: |
          echo "Applying SAFE patch to enable booting to recovery without PC..."
          TARGET_FILE="kernel-5.10/drivers/power/reset/reboot-mode.c"
          sed -i 's/if (!cmd)/if (!cmd)\n\t\tcmd = "recovery";\n\telse if (2 < 1)/' "$TARGET_FILE"
          echo "Recovery patch applied successfully."

          echo "Personalizing build script with your name..."
          sed -i 's/-ravindu644-/-${{ github.event.inputs.YOUR_NAME }}-/g' build.sh
          echo "Build script personalized."

      - name: Run The Main Build Script
        working-directory: ${{ steps.source.outputs.work_dir }}
        run: |
          bash build.sh

      - name: Upload Final Odin Package to Gofile
        working-directory: ${{ steps.source.outputs.work_dir }}
        run: |
          FINAL_TAR=$(find dist -name "*.tar" | head -n 1)
          if [ -z "$FINAL_TAR" ]; then
            echo "Error: Final .tar file not found in dist folder! Build may have failed."
            exit 1
          fi
          
          RESPONSE=$(curl -F "file=@${FINAL_TAR}" -H "Authorization: Bearer E29ro0ueg1dXX7CHmJSdrO9puOTUMREk" https://upload.gofile.io/uploadFile)
          DOWNLOAD_PAGE=$(echo $RESPONSE | grep -o '"downloadPage": *"[^"]*"' | cut -d '"' -f 4)
          if [ -z "$DOWNLOAD_PAGE" ]; then
            echo "Error: Could not extract download page URL from Gofile response."
            exit 1
          fi
          
          echo "----------------------------------------------------------------"
          echo "Build successful. Download your Odin-flashable kernel here: $DOWNLOAD_PAGE"
          echo "----------------------------------------------------------------"
