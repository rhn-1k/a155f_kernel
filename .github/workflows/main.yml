name: Build A15 Kernel - The Official Script Method

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE_URL:
        description: 'Samsung Kernel Source URL (.zip)'
        required: true
      TOOLCHAIN_URL:
        description: 'AOSP Clang Toolchain URL (.tar.gz)'
        required: true
      STOCK_BOOT_IMG_URL:
        description: 'Stock boot.img URL (Used as a template)'
        required: true
      YOUR_NAME:
        description: 'Your developer name (no spaces)'
        required: true
        default: 'rhn_1k'

jobs:
  build:
    name: Build and Package Kernel
    runs-on: ubuntu-22.04

    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev python2
          sudo ln -sf /usr/bin/python2 /usr/bin/python

      - name: Download and Prepare Workspace
        id: workspace
        run: |
          echo "--- Preparing Workspace ---"
          curl -L -o source.zip "${{ github.event.inputs.KERNEL_SOURCE_URL }}"
          unzip -q source.zip
          tar -xf Kernel.tar.gz
          
          mkdir -p tools
          curl -L -o tools/magiskboot "https://github.com/poqdavid/android_kernel_samsung_sma155f/raw/refs/heads/kernelsu/scripts/bin/magiskboot"
          chmod +x tools/magiskboot
          
          curl -L -o stock_boot.img "${{ github.event.inputs.STOCK_BOOT_IMG_URL }}"
          
          echo "work_dir=$(realpath .)" >> $GITHUB_OUTPUT

      - name: Setup Toolchain (The Correct Way for The Script)
        run: |
          echo "--- Setting up Toolchain in the expected directory ---"
          # The build script expects the toolchain in a very specific path.
          # We will create this path and extract the toolchain there.
          TOOLCHAIN_DIR="prebuilts/clang/host/linux-x86/clang-r416183b"
          mkdir -p $TOOLCHAIN_DIR
          curl -L "${{ github.event.inputs.TOOLCHAIN_URL }}" | tar -xz -C $TOOLCHAIN_DIR --strip-components=1
          
          # We no longer need to manually export PATH. The script will do it.
          echo "Toolchain is ready at $TOOLCHAIN_DIR"

      - name: Configure, Patch, and Integrate
        working-directory: ${{ steps.workspace.outputs.work_dir }}/kernel-5.10
        run: |
          echo "--- Patching and Configuring Kernel ---"
          sed -i 's/if (!cmd)/if (!cmd)\n\t\tcmd = "recovery";\n\telse if (2 < 1)/' drivers/power/reset/reboot-mode.c
          chmod +x scripts/config
          DEFCONFIG_FILE="arch/arm64/configs/a15_00_defconfig"
          ./scripts/config --file $DEFCONFIG_FILE --set-val UH n --set-val RKP n --set-val KDP n --set-val SECURITY_DEFEX n --set-val INTEGRITY n
          ./scripts/config --file $DEFCONFIG_FILE --set-val KSU y
          echo "CONFIG_LOCALVERSION=\"-${{ github.event.inputs.YOUR_NAME }}\"" >> $DEFCONFIG_FILE
          echo "CONFIG_LOCALVERSION_AUTO=n" >> $DEFCONFIG_FILE
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

      - name: Build The Kernel (Using The Official build_kernel.sh)
        working-directory: ${{ steps.workspace.outputs.work_dir }}
        run: |
          echo "--- Starting The Main Build using the official script ---"
          chmod +x build_kernel.sh
          # Run the script without any manual PATH exports. It will find the toolchain.
          ./build_kernel.sh

      - name: Repack and Upload Final Artifact
        working-directory: ${{ steps.workspace.outputs.work_dir }}
        run: |
          echo "--- Repacking Final Image ---"
          ./tools/magiskboot unpack stock_boot.img
          cp out/target/product/a15/obj/KERNEL_OBJ/kernel-5.10/arch/arm64/boot/Image.gz kernel
          ./tools/magiskboot repack stock_boot.img new_boot.img
          tar -cvf "Patched-Odin-A15-${{ github.event.inputs.YOUR_NAME }}.tar" new_boot.img
          
          FILE_PATH=$(realpath "Patched-Odin-A15-${{ github.event.inputs.YOUR_NAME }}.tar")
          RESPONSE=$(curl -F "file=@${FILE_PATH}" -H "Authorization: Bearer E29ro0ueg1dXX7CHmJSdrO9puOTUMREk" https://upload.gofile.io/uploadFile)
          DOWNLOAD_PAGE=$(echo $RESPONSE | grep -o '"downloadPage": *"[^"]*"' | cut -d '"' -f 4)
          
          if [ -z "$DOWNLOAD_PAGE" ]; then 
            echo "Error: Could not get Gofile URL! Response was:"
            echo $RESPONSE
            exit 1
          fi
          
          echo "----------------------------------------------------------------"
          echo "Build successful. Download your flashable Odin tar here: $DOWNLOAD_PAGE"
          echo "----------------------------------------------------------------"
