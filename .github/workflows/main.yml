name: Build A15 Kernel - The True, Final Method

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE_URL:
        description: 'Samsung Kernel Source URL (.zip)'
        required: true
      TOOLCHAIN_URL:
        description: 'AOSP Clang Toolchain URL (.tar.gz)'
        required: true
      YOUR_NAME:
        description: 'Your developer name (no spaces)'
        required: true
        default: 'rhn_1k'

jobs:
  build:
    name: Build and Package Kernel
    runs-on: ubuntu-22.04

    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev python2
          sudo ln -sf /usr/bin/python2 /usr/bin/python

      - name: Download and Prepare Workspace
        id: workspace
        run: |
          echo "--- Preparing Workspace ---"
          curl -L -o source.zip "${{ github.event.inputs.KERNEL_SOURCE_URL }}"
          unzip -q source.zip
          tar -xf Kernel.tar.gz
          
          # Get the tools the developer ACTUALLY uses: a pre-made build.config and mkbootimg.py
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg --depth=1
          mkdir -p oem_prebuilt_images
          curl -L -o oem_prebuilt_images/gki-ramdisk.lz4 "https://github.com/ravindu644/android_kernel_a165f/raw/main/oem_prebuilt_images/gki-ramdisk.lz4"
          
          # *** THE REAL FIX: Get a working build.config instead of generating a broken one ***
          curl -L -o build.config "https://raw.githubusercontent.com/poqdavid/android_kernel_samsung_sma155f/kernelsu/build.config"
          
          echo "work_dir=$(realpath .)" >> $GITHUB_OUTPUT

      - name: Setup Toolchain
        run: |
          echo "--- Setting up Toolchain ---"
          mkdir -p toolchain
          curl -L "${{ github.event.inputs.TOOLCHAIN_URL }}" | tar -xz -C toolchain --strip-components=1
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_COMPAT=arm-linux-gnueabi-" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "PATH=$(realpath toolchain/bin):$PATH" >> $GITHUB_ENV

      - name: Configure, Patch, and Integrate
        working-directory: ${{ steps.workspace.outputs.work_dir }}/kernel-5.10
        run: |
          echo "--- Patching and Configuring Kernel ---"
          sed -i 's/if (!cmd)/if (!cmd)\n\t\tcmd = "recovery";\n\telse if (2 < 1)/' drivers/power/reset/reboot-mode.c
          chmod +x scripts/config
          DEFCONFIG_FILE="arch/arm64/configs/a15_00_defconfig"
          ./scripts/config --file $DEFCONFIG_FILE --set-val UH n --set-val RKP n --set-val KDP n --set-val SECURITY_DEFEX n --set-val INTEGRITY n
          ./scripts/config --file $DEFCONFIG_FILE --set-val KSU y
          echo "CONFIG_LOCALVERSION=\"-${{ github.event.inputs.YOUR_NAME }}\"" >> $DEFCONFIG_FILE
          echo "CONFIG_LOCALVERSION_AUTO=n" >> $DEFCONFIG_FILE
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

      - name: Build The Kernel (The True, Final Method)
        working-directory: ${{ steps.workspace.outputs.work_dir }}
        run: |
          echo "--- Starting The Main Build (The True, Final Method) ---"
          
          # Step 1: Create the output directory and place the working build.config there
          mkdir -p out/target/product/a15/obj/KERNEL_OBJ
          cp build.config out/target/product/a15/obj/KERNEL_OBJ/
          
          # Step 2: Define all environment variables, exactly as the developer does
          export PLATFORM_VERSION=12
          export OUT_DIR="$(pwd)/out/target/product/a15/obj/KERNEL_OBJ"
          export DIST_DIR="$(pwd)/out/target/product/a15/obj/KERNEL_OBJ"
          export BUILD_CONFIG="$(pwd)/out/target/product/a15/obj/KERNEL_OBJ/build.config"
          
          # These are the magic GKI options from the developer's script
          export GKI_KERNEL_BUILD_OPTIONS="
              SKIP_MRPROPER=1
              BUILD_BOOT_IMG=1
              MKBOOTIMG_PATH=$(pwd)/mkbootimg/mkbootimg.py
              KERNEL_BINARY=Image.gz
              BOOT_IMAGE_HEADER_VERSION=4
              SKIP_VENDOR_BOOT=1
              GKI_RAMDISK_PREBUILT_BINARY=$(pwd)/oem_prebuilt_images/gki-ramdisk.lz4
              LTO=thin
          "
          
          # Step 3: Run the build from inside the 'kernel' directory
          cd kernel
          env ${GKI_KERNEL_BUILD_OPTIONS} ./build/build.sh

      - name: Package and Upload Final Artifact
        working-directory: ${{ steps.workspace.outputs.work_dir }}
        run: |
          echo "--- Packaging Final Image ---"
          cp out/target/product/a15/obj/KERNEL_OBJ/boot.img .
          tar -cvf "Patched-Odin-A15-${{ github.event.inputs.YOUR_NAME }}.tar" boot.img
          
          FILE_PATH=$(realpath "Patched-Odin-A15-${{ github.event.inputs.YOUR_NAME }}.tar")
          RESPONSE=$(curl -F "file=@${FILE_PATH}" -H "Authorization: Bearer E29ro0ueg1dXX7CHmJSdrO9puOTUMREk" https://upload.gofile.io/uploadFile)
          DOWNLOAD_PAGE=$(echo $RESPONSE | grep -o '"downloadPage": *"[^"]*"' | cut -d '"' -f 4)
          
          if [ -z "$DOWNLOAD_PAGE" ]; then 
            echo "Error: Could not get Gofile URL! Response was:"
            echo $RESPONSE
            exit 1
          fi
          
          echo "----------------------------------------------------------------"
          echo "Build successful. Download your flashable Odin tar here: $DOWNLOAD_PAGE"
          echo "----------------------------------------------------------------"
