name: Build KernelSU-Next Kernel (LKM)

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE_URL:
        description: 'Direct URL to your original kernel source (.tar.gz, .zip)'
        required: true
      TOOLCHAIN_URL:
        description: 'Direct URL to your toolchain archive (.tar.gz)'
        required: true
      YOUR_NAME:
        description: 'Your developer name (no spaces)'
        required: true
        default: 'rhn_1k'

jobs:
  build:
    name: Build and Package Kernel
    runs-on: ubuntu-22.04

    steps:
      - name: Maximize Build Space by Cleaning Runner
        uses: rokibhasansagar/slimhub_actions@main
        with:
          cache: 'false'
          go: 'false'
          dotnet: 'true'
          haskell: 'true'
          android: 'true'
          
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 16

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev python2.7
          sudo ln -sf /usr/bin/python2.7 /usr/bin/python2

      - name: Setup Workspace
        id: setup
        run: |
          mkdir -p /home/runner/workspace/prebuilts
          echo "workspace_path=/home/runner/workspace" >> $GITHUB_OUTPUT

      - name: Download, Setup, and Clean Toolchain
        working-directory: ${{ steps.setup.outputs.workspace_path }}/prebuilts
        run: |
          curl -L -o toolchain.tar.gz "${{ github.event.inputs.TOOLCHAIN_URL }}"
          tar -xf toolchain.tar.gz
          rm toolchain.tar.gz

      - name: Setup Kernel Build Environment
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "PLATFORM_VERSION=12" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_COMPAT=arm-linux-gnueabi-" >> $GITHUB_ENV
          echo "LTO=thin" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=${{ github.event.inputs.YOUR_NAME }}" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=GitHub-Actions" >> $GITHUB_ENV

      - name: Download, Prepare, and Personalize Kernel Source
        id: kernel_source
        working-directory: ${{ steps.setup.outputs.workspace_path }}
        run: |
          curl -L -o kernel_source.zip "${{ github.event.inputs.KERNEL_SOURCE_URL }}"
          unzip -q kernel_source.zip
          rm kernel_source.zip
          NESTED_DIR=$(find . -mindepth 1 -maxdepth 1 -type d)
          if [ -d "$NESTED_DIR" ]; then
            mv $NESTED_DIR/* .
            rm -rf $NESTED_DIR
          fi
          KERNEL_DIR=$(find . -maxdepth 2 -type f -name "build.sh" -printf "%h\n" | xargs dirname)
          echo "kernel_path=$(realpath $KERNEL_DIR)" >> $GITHUB_OUTPUT
          # Use the correct defconfig for a16
          DEFCONFIG_PATH="$KERNEL_DIR/arch/arm64/configs/a16_00_defconfig"
          echo "CONFIG_LOCALVERSION=\"-${{ github.event.inputs.YOUR_NAME }}-LKM\"" >> $DEFCONFIG_PATH
          echo "CONFIG_LOCALVERSION_AUTO=n" >> $DEFCONFIG_PATH
          $KERNEL_DIR/scripts/config --file $DEFCONFIG_PATH --set-val RKP n --set-val KDP n --set-val SECURITY_DEFEX n --set-val INTEGRITY n
          $KERNEL_DIR/scripts/config --file $DEFCONFIG_PATH --set-val TCP_CONG_BBR y --set-val NET_SCH_FQ y --set-str DEFAULT_TCP_CONG "bbr" --set-val DEFAULT_CUBIC n
          $KERNEL_DIR/scripts/config --file $DEFCONFIG_PATH --set-val KSU m
          $KERNEL_DIR/scripts/config --file $DEFCONFIG_PATH --set-val MODULES y
          $KERNEL_DIR/scripts/config --file $DEFCONFIG_PATH --set-val MODULE_UNLOAD y

      - name: Build The Kernel
        working-directory: ${{ steps.setup.outputs.workspace_path }}
        run: |
          export BUILD_CONFIG="out/build.config"
          # Use the correct defconfig for a16
          python2 ${{ steps.kernel_source.outputs.kernel_path }}/scripts/gen_build_config.py --kernel-defconfig a16_00_defconfig -m user -o $BUILD_CONFIG
          ${{ steps.kernel_source.outputs.kernel_path }}/build/build.sh

      - name: Create Flashable ZIP using AnyKernel3
        id: zip_package
        working-directory: ${{ steps.setup.outputs.workspace_path }}
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git anykernel
          cp out/dist/Image.gz anykernel/
          KSU_MODULE=$(find out/dist -name "ksu.ko")
          if [ -f "$KSU_MODULE" ]; then
            cp $KSU_MODULE anykernel/
          fi
          cd anykernel
          ZIP_NAME="${{ github.event.inputs.YOUR_NAME }}-Kernel-LKM-${{ github.run_id }}.zip"
          zip -r9 ../$ZIP_NAME * -x .git README.md *placeholder
          echo "zip_path=$(realpath ../$ZIP_NAME)" >> $GITHUB_OUTPUT

      - name: Upload to Gofile
        run: |
          FILE_PATH="${{ steps.zip_package.outputs.zip_path }}"
          RESPONSE=$(curl -F "file=@${FILE_PATH}" -H "Authorization: Bearer E29ro0ueg1dXX7CHmJSdrO9puOTUMREk" https://upload.gofile.io/uploadFile)
          DOWNLOAD_PAGE=$(echo $RESPONSE | grep -o '"downloadPage": *"[^"]*"' | cut -d '"' -f 4)
          if [ -z "$DOWNLOAD_PAGE" ]; then
            echo "Error: Could not extract download page URL from Gofile response."
            exit 1
          fi
          echo "----------------------------------------------------------------"
          echo "Build successful. Download link: $DOWNLOAD_PAGE"
          echo "----------------------------------------------------------------"
