name: Test VBMETA Repacking (Final Method)

on:
  workflow_dispatch:

jobs:
  test-vbmeta-repack:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lz4 python3

      - name: Set Scripts Executable
        run: |
          chmod +x scripts/bin/magiskboot
          chmod +x scripts/bin/avb/avbtool.py

      - name: Patch and Repack (Correct AVB Method)
        id: patch_step
        run: |
          echo "--- Starting Ramdisk Patch Test (Correct AVB Method) ---"
          MAGISKBOOT=./scripts/bin/magiskboot
          AVBTOOL=./scripts/bin/avb/avbtool.py
          BOOT_LZ4=./boot.img.lz4
          BOOT_IMG_TEMP=./boot_temp.img

          if [ ! -f "$BOOT_LZ4" ]; then
            echo "::error:: Base boot.img.lz4 not found!"
            exit 1
          fi

          # 1. Unpack the original boot image
          lz4 -d $BOOT_LZ4 $BOOT_IMG_TEMP
          $MAGISKBOOT unpack $BOOT_IMG_TEMP
          
          # 2. Patch the ramdisk
          mkdir ramdisk_patch_dir
          (cd ramdisk_patch_dir && ../scripts/bin/magiskboot cpio ../ramdisk.cpio extract)
          find ramdisk_patch_dir -type f -name "*.rc" -exec sed -i 's/setenforce 1/setenforce 0/g' {} +
          (cd ramdisk_patch_dir && find . | cpio -o -H newc > ../ramdisk_new.cpio)
          mv ramdisk_new.cpio ramdisk.cpio
          
          # 3. Rebuild the boot image from components, DO NOT USE REPACK
          # This avoids the VBMETA signature check issue within repack
          echo "Rebuilding boot image from components..."
          $MAGISKBOOT pack -h header -k kernel -r ramdisk.cpio new-boot.img
          
          # 4. Add the AVB hash footer to the newly created image
          echo "Adding AVB hash footer..."
          $AVBTOOL add_hash_footer --image new-boot.img --partition_name boot --partition_size $(wc -c < new-boot.img)
          
          echo "âœ… SUCCESS: 'new-boot.img' was created and signed with a dev footer."
          
          # Clean up
          rm -rf ramdisk_patch_dir ramdisk.cpio stock_boot.img header kernel $BOOT_IMG_TEMP

