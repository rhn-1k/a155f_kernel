name: Test Repack (Based on Your Script)

on:
  workflow_dispatch:

jobs:
  test-repack:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lz4 python3

      - name: Set Scripts Executable
        run: |
          chmod +x scripts/bin/magiskboot
          chmod +x scripts/bin/avb/avbtool.py

      - name: Patch and Repack (Following YOUR repack.sh logic)
        id: patch_step
        run: |
          echo "--- Starting Test: Following your repack.sh logic ---"
          MAGISKBOOT=./scripts/bin/magiskboot
          AVBTOOL=./scripts/bin/avb/avbtool.py
          BOOT_LZ4=./boot.img.lz4
          BOOT_IMG=./boot.img
          WORKSPACE=./workspace
          
          # 1. Prepare environment (from your script)
          mkdir -p $WORKSPACE
          rm -rf $WORKSPACE/*
          lz4 -d $BOOT_LZ4 $BOOT_IMG

          # 2. Unpack boot.img into workspace (from your script)
          cd $WORKSPACE
          $MAGISKBOOT unpack -h "${PARENTDIR:-..}/$BOOT_IMG"
          
          # 3. <<< THIS IS OUR PATCHING STEP >>>
          echo "Patching ramdisk.cpio..."
          mkdir ramdisk_work
          # Use subshell to avoid cd back and forth
          (cd ramdisk_work && ../scripts/bin/magiskboot cpio ../ramdisk.cpio extract)
          find ramdisk_work -type f -name "*.rc" -exec sed -i 's/setenforce 1/setenforce 0/g' {} +
          # Use standard cpio to reliably rebuild the ramdisk
          (cd ramdisk_work && find . | cpio -o -H newc > ../ramdisk_new.cpio)
          mv ramdisk_new.cpio ramdisk.cpio
          rm -rf ramdisk_work
          echo "Ramdisk patched successfully."
          
          # 4. Repack the boot image (from your script)
          # We need the original kernel from unpack, so we don't delete it
          echo "Repacking boot image..."
          $MAGISKBOOT repack "${PARENTDIR:-..}/$BOOT_IMG" new-boot.img
          
          # 5. Sign the new boot image (from your script)
          echo "Signing new boot image..."
          # Note: This assumes a fixed partition size for the test. Your script uses a fixed value too.
          python3 "${PARENTDIR:-..}/$AVBTOOL" add_hash_footer \
            --partition_name boot \
            --partition_size 67108864 \
            --image new-boot.img \
            --algorithm SHA256_RSA4096 \
            --key "${PARENTDIR:-..}/scripts/bin/certs/sign.pk8"
          
          # 6. Verify success
          if [ -f "new-boot.img" ]; then
            echo "âœ… SUCCESS: 'new-boot.img' was created and signed, following your script's logic."
          else
            echo "::error:: Repack failed. 'new-boot.img' was not created."
            exit 1
          fi
          
          cd ..
          # Clean up
          rm -rf $WORKSPACE $BOOT_IMG

