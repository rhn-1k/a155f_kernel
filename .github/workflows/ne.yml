name: Test VBMETA Repacking

on:
  workflow_dispatch:

jobs:
  test-vbmeta-repack:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lz4 python3

      - name: Set Scripts Executable
        run: |
          chmod +x scripts/bin/magiskboot
          chmod +x scripts/bin/avb/avbtool.py

      - name: Patch and Repack with VBMETA handling
        id: patch_step
        run: |
          echo "--- Starting Ramdisk Patch Test with VBMETA handling ---"
          MAGISKBOOT=./scripts/bin/magiskboot
          AVBTOOL=./scripts/bin/avb/avbtool.py
          BOOT_LZ4=./boot.img.lz4
          BOOT_IMG_TEMP=./boot_temp.img

          if [ ! -f "$BOOT_LZ4" ]; then
            echo "::error:: Base boot.img.lz4 not found!"
            exit 1
          fi

          # 1. Unpack the original boot image
          lz4 -d $BOOT_LZ4 $BOOT_IMG_TEMP
          $MAGISKBOOT unpack $BOOT_IMG_TEMP
          
          # 2. Create a directory and extract the ramdisk
          mkdir ramdisk_patch_dir
          cd ramdisk_patch_dir
          ../scripts/bin/magiskboot cpio ../ramdisk.cpio extract
          
          # 3. Patch the .rc files
          echo "Forcing permissive state in all .rc files..."
          find . -type f -name "*.rc" -exec sed -i 's/setenforce 1/setenforce 0/g' {} +
          
          # 4. Repack the ramdisk using the standard Linux cpio tool for reliability
          echo "Repacking ramdisk using standard cpio tool..."
          find . | cpio -o -H newc > ../ramdisk_new.cpio
          cd ..
          mv ramdisk_new.cpio ramdisk.cpio
          
          # 5. Repack the boot image using magiskboot
          # This will create a 'new-boot.img' that is NOT signed
          $MAGISKBOOT repack $BOOT_IMG_TEMP new-boot.img
          
          # 6. Handle VBMETA: Re-sign the new boot image or create a disabled footer
          # This is the crucial step that was missing
          echo "Handling VBMETA..."
          # This command adds a vbmeta footer that essentially disables verification for this image
          # It's a common method for custom boot images.
          $AVBTOOL add_hash_footer --image new-boot.img --partition_name boot --partition_size $(wc -c < new-boot.img)
          
          echo "âœ… SUCCESS: The boot image was patched and a VBMETA footer was added."
          echo "A file named 'new-boot.img' has been created successfully."
          
          # Clean up
          rm -rf ramdisk_patch_dir ramdisk.cpio stock_boot.img $BOOT_IMG_TEMP

