name: Test Repack (No CD - Final Attempt)

on:
  workflow_dispatch:

jobs:
  test-repack:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lz4 python3 openssl

      - name: Set Scripts Executable
        run: |
          chmod +x scripts/bin/magiskboot
          chmod +x scripts/bin/avb/avbtool.py

      - name: Patch and Repack (NO CD - ABSOLUTE PATHS ONLY)
        id: patch_step
        run: |
          echo "--- Starting Test: Using Absolute Paths Only ---"
          # Define all paths absolutely from the start
          ROOT=$GITHUB_WORKSPACE
          MAGISKBOOT=$ROOT/scripts/bin/magiskboot
          AVBTOOL=$ROOT/scripts/bin/avb/avbtool.py
          BOOT_LZ4=$ROOT/boot.img.lz4
          BOOT_IMG=$ROOT/boot.img
          WORKSPACE=$ROOT/workspace # A temporary workspace in the root
          CERTDIR=$ROOT/scripts/bin/certs
          
          # 1. Prepare environment
          mkdir -p $WORKSPACE
          rm -rf $WORKSPACE/*
          mkdir -p $CERTDIR
          lz4 -d $BOOT_LZ4 $BOOT_IMG

          # 2. Unpack boot.img and place components directly into workspace
          $MAGISKBOOT unpack -h $BOOT_IMG
          # Move the unpacked files into the workspace
          mv kernel kernel_dtb ramdisk.cpio second dtb extra recovery_dtbo header $WORKSPACE/ 2>/dev/null || true
          
          # 3. Patch ramdisk.cpio in-place inside the workspace
          echo "Patching ramdisk.cpio in-place..."
          RAMDISK_CPIO=$WORKSPACE/ramdisk.cpio
          TEMP_PATCH_DIR=$WORKSPACE/temp_rc_files
          mkdir -p $TEMP_PATCH_DIR

          # Find all .rc files inside the cpio and process them
          $MAGISKBOOT cpio $RAMDISK_CPIO "ls" | grep "\.rc$" | while read -r rcfile; do
            echo "Patching file: $rcfile"
            # Extract the single file
            $MAGISKBOOT cpio $RAMDISK_CPIO "extract $rcfile $TEMP_PATCH_DIR/$rcfile"
            # Patch it
            sed -i 's/setenforce 1/setenforce 0/g' "$TEMP_PATCH_DIR/$rcfile"
            # Get original permissions
            PERMS=$($MAGISKBOOT cpio $RAMDISK_CPIO "ls" | grep -w "$rcfile" | awk '{print $1}')
            # Add it back, overwriting the original
            $MAGISKBOOT cpio $RAMDISK_CPIO "add $PERMS $rcfile $TEMP_PATCH_DIR/$rcfile"
          done
          rm -rf $TEMP_PATCH_DIR
          echo "Ramdisk patched successfully."

          # 4. Repack the boot image
          echo "Repacking boot image..."
          # Use absolute path for the template, and output to the workspace
          # Crucially, magiskboot needs to be run from the directory containing the components
          cd $WORKSPACE
          $MAGISKBOOT repack $BOOT_IMG new-boot.img
          
          # 5. Sign the new boot image
          echo "Signing new boot image..."
          if [ ! -f "$CERTDIR/sign.pk8" ]; then
            openssl genrsa -out $CERTDIR/sign.pk8 4096
          fi
          
          python3 $AVBTOOL add_hash_footer \
            --partition_name boot \
            --partition_size 67108864 \
            --image new-boot.img \
            --algorithm SHA256_RSA4096 \
            --key $CERTDIR/sign.pk8
          
          # 6. Verify success
          if [ -f "new-boot.img" ]; then
            echo "âœ… SUCCESS: 'new-boot.img' was created and signed."
          else
            echo "::error:: Repack failed. 'new-boot.img' was not created."
            exit 1
          fi
          
          # Cleanup
          cd ..
          rm -rf $WORKSPACE $BOOT_IMG
