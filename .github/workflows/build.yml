name: Build A155F Kernel Merged with KernelSU Next

on:
  workflow_dispatch:
    inputs:
      TOOLCHAIN_URL:
        description: 'URL of the toolchain .tar.gz file'
        required: true
        default: 'https://github.com/ravindu644/android_kernel_a165f/releases/download/toolchain/toolchain.tar.gz'
        type: string
      DEVELOPER_NAME:
        description: 'Your name, to be appended to the kernel version (e.g., rhn-1k)'
        required: true
        default: 'rhn-1k'
        type: string

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev python3 python-is-python3 python2.7 openssl lz4
          sudo ln -sf /usr/bin/python2.7 /usr/bin/python2

      - name: Download and Extract Toolchain
        run: |
          curl -LO "${{ github.event.inputs.TOOLCHAIN_URL }}"
          FILE_NAME=$(basename "${{ github.event.inputs.TOOLCHAIN_URL }}")
          tar -xf "$FILE_NAME"
          rm "$FILE_NAME"

      - name: Apply Custom Recovery Reboot Patch
        run: |
          sed -i 's/if (!cmd)/if (!cmd)\n\t\tcmd = "recovery";\n\telse if (2 < 1)/' kernel-5.10/drivers/power/reset/reboot-mode.c

      - name: Set Scripts Executable
        run: |
          chmod +x build_kernel.sh
          chmod +x clean_build.sh
          chmod +x kernel-5.10/scripts/config
          chmod +x scripts/repack
          chmod +x scripts/bin/magiskboot
          chmod +x scripts/bin/ksud-x86_64-unknown-linux-musl
          chmod +x scripts/bin/avb/avbtool.py

      - name: Build The Kernel
        run: |
          echo "CONFIG_LOCALVERSION_AUTO=n" >> kernel-5.10/arch/arm64/configs/a15_00_defconfig
          echo "CONFIG_LOCALVERSION=\"-${{ github.event.inputs.DEVELOPER_NAME }}\"" >> kernel-5.10/arch/arm64/configs/a15_00_defconfig
          ./build_kernel.sh

      - name: Repack The Boot Image
        working-directory: ./scripts
        run: |
          ./repack

      - name: Prepare Artifact for Upload
        id: prepare_artifact
        run: |
          FINAL_IMAGE="boot-repacked-signed.img"
          if [ ! -f "$FINAL_IMAGE" ]; then
            echo "::error::Final image $FINAL_IMAGE not found in root directory!"
            ls -R
            exit 1
          fi
          NEW_NAME="A155F-boot-${{ github.event.inputs.DEVELOPER_NAME }}.img"
          mv "$FINAL_IMAGE" "$NEW_NAME"
          echo "final_image_name=$NEW_NAME" >> $GITHUB_OUTPUT

      - name: Upload Final Boot Image to Gofile
        run: |
          FILE_PATH="${{ steps.prepare_artifact.outputs.final_image_name }}"
          
          RESPONSE=$(curl -F "file=@${FILE_PATH}" \
                          -H "Authorization: Bearer E29ro0ueg1dXX7CHmJSdrO9puOTUMREk" \
                          https://upload.gofile.io/uploadFile)
          
          DOWNLOAD_PAGE=$(echo $RESPONSE | grep -o '"downloadPage": *"[^"]*"' | cut -d '"' -f 4)
          
          if [ -z "$DOWNLOAD_PAGE" ]; then
            echo "Error: Could not extract download page URL from Gofile response."
            exit 1
          fi
          
          echo "File uploaded successfully!"
          echo "Download Link: $DOWNLOAD_PAGE"
