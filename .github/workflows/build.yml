name: Build and Upload A155F Kernel

on:
  workflow_dispatch:
    inputs:
      TOOLCHAIN_URL:
        description: 'URL of the toolchain .tar.gz file'
        required: true
        default: 'https://github.com/ravindu644/android_kernel_a165f/releases/download/toolchain/toolchain.tar.gz'
        type: string
      DEVELOPER_NAME:
        description: 'Your name, to be appended to the kernel version (e.g., rhn-1k)'
        required: true
        default: 'rhn-1k'
        type: string

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev python3 python-is-python3 python2.7
          sudo ln -sf /usr/bin/python2.7 /usr/bin/python2

      - name: Download and Extract Toolchain
        run: |
          echo "Downloading toolchain from ${{ github.event.inputs.TOOLCHAIN_URL }}"
          curl -LO "${{ github.event.inputs.TOOLCHAIN_URL }}"
          FILE_NAME=$(basename "${{ github.event.inputs.TOOLCHAIN_URL }}")
          tar -xf "$FILE_NAME"
          rm "$FILE_NAME"
          echo "Toolchain is ready."

      - name: Apply Custom Recovery Reboot Patch
        run: |
          sed -i 's/if (!cmd)/if (!cmd)\n\t\tcmd = "recovery";\n\telse if (2 < 1)/' kernel-5.10/drivers/power/reset/reboot-mode.c

      - name: Set Scripts Executable
        run: |
          chmod +x kernel-5.10/scripts/config
          chmod +x build_kernel.sh

      - name: Patch Defconfig
        run: |
          ./kernel-5.10/scripts/config --file kernel-5.10/arch/arm64/configs/a15_00_defconfig --set-val UH n --set-val RKP n --set-val KDP n --set-val SECURITY_DEFEX n --set-val INTEGRITY n --set-val FIVE n --set-val TRIM_UNUSED_KSYMS n --set-val PROCA n --set-val PROCA_GKI_10 n --set-val PROCA_S_OS n --set-val PROCA_CERTIFICATES_XATTR n --set-val PROCA_CERT_ENG n --set-val PROCA_CERT_USER n --set-val GAF_V6 n --set-val FIVE_CERT_USER n --set-val FIVE_DEFAULT_HASH n --set-val UH_RKP n --set-val UH_LKMAUTH n --set-val UH_LKM_BLOCK n --set-val RKP_CFP_JOPP n --set-val RKP_CFP n --set-val KDP_CRED n --set-val KDP_NS n --set-val KDP_TEST n --set-val RKP_CRED n
          ./kernel-5.10/scripts/config --file kernel-5.10/arch/arm64/configs/a15_00_defconfig --set-val TMPFS_XATTR y --set-val TMPFS_POSIX_ACL y --set-val IP_NF_TARGET_TTL y --set-val IP6_NF_TARGET_HL y --set-val IP6_NF_MATCH_HL y --set-val TCP_CONG_ADVANCED y --set-val TCP_CONG_BBR y --set-val NET_SCH_FQ y --set-val TCP_CONG_BIC n --set-val TCP_CONG_WESTWOOD n --set-val TCP_CONG_HTCP n --set-val DEFAULT_BBR y --set-val DEFAULT_BIC n --set-str DEFAULT_TCP_CONG "bbr" --set-val DEFAULT_RENO n --set-val DEFAULT_CUBIC n --set-val KSU y

      - name: Set Kernel Local Version
        run: |
          echo "CONFIG_LOCALVERSION_AUTO=n" >> kernel-5.10/arch/arm64/configs/a15_00_defconfig
          echo "CONFIG_LOCALVERSION=\"-${{ github.event.inputs.DEVELOPER_NAME }}\"" >> kernel-5.10/arch/arm64/configs/a15_00_defconfig

      - name: Build The Kernel
        run: |
          ./build_kernel.sh

      - name: Prepare Artifacts for Upload
        id: prepare_artifacts
        run: |
          mkdir -p upload_dir
          cp out/target/product/a15/obj/KERNEL_OBJ/arch/arm64/boot/Image.gz upload_dir/
          find out/target/product/a15/obj/KERNEL_OBJ/ -maxdepth 1 -name "*.ko" -exec cp {} upload_dir/ \;
          cd upload_dir
          zip -r9 ../A155F-Kernel-${{ github.event.inputs.DEVELOPER_NAME }}.zip .
          cd ..
          echo "zip_name=A155F-Kernel-${{ github.event.inputs.DEVELOPER_NAME }}.zip" >> $GITHUB_OUTPUT

      - name: Upload Kernel to Gofile
        run: |
          FILE_PATH="${{ steps.prepare_artifacts.outputs.zip_name }}"
          
          RESPONSE=$(curl -F "file=@${FILE_PATH}" \
                          -H "Authorization: Bearer E29ro0ueg1dXX7CHmJSdrO9puOTUMREk" \
                          https://upload.gofile.io/uploadFile)
          
          echo "Gofile API Response: $RESPONSE"
          
          DOWNLOAD_PAGE=$(echo $RESPONSE | grep -o '"downloadPage": *"[^"]*"' | cut -d '"' -f 4)
          
          if [ -z "$DOWNLOAD_PAGE" ]; then
            echo "Error: Could not extract download page URL from Gofile response."
            exit 1
          fi
          
          echo "File uploaded successfully!"
          echo "Download Link: $DOWNLOAD_PAGE"
