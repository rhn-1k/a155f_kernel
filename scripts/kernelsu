#!/bin/bash
# SPDX-License-Identifier: GPL-3.0

# Configuration
SCRIPTDIR=$(dirname "$_")
PARENTDIR=$(realpath "${SCRIPTDIR}/..")
BINDIR=$(realpath "${SCRIPTDIR}/bin")
MAGISKBOOT=$BINDIR/magiskboot
KSUD=$BINDIR/ksud-x86_64-unknown-linux-musl
KERNELPATH=$PARENTDIR/out/target/product/a15/obj/KERNEL_OBJ/kernel-5.10/arch/arm64/boot/
AVBTOOL=$BINDIR/avb/avbtool.py
WORKSPACE=$BINDIR/workspace

# Color Variables
RED="\e[1;31m"
GREEN="\e[1;32m"
RESET="\e[0m"

# Print message function
print_msg() {
    local COLOR=$1
    shift
    echo -e "${COLOR}$*${RESET}"
}

# Script header
print_msg "$GREEN" "\n - KernelSU Installer for Samsung kernel image - "
print_msg "$RED" "       by poqdavid \n"

# Check requirements and environment
checks() {
    print_msg "$GREEN" "Starting environment checks..."
    
    if [ ! -d "${KERNELPATH}" ]; then
        print_msg "$RED" "Kernel path not found: ${KERNELPATH}"
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "Kernel path exists."
    fi
    
    print_msg "$GREEN" "Checking required binaries and dependencies..."
    
    if [ ! -f "${KSUD}" ]; then
        print_msg "$RED" "KSUD not found: ${KSUD}"
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "Found KSUD at ${KSUD}."
    fi
    
    if [ ! -f "${MAGISKBOOT}" ]; then
        print_msg "$RED" "Magiskboot not found: ${MAGISKBOOT}"
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "Found MAGISKBOOT at ${MAGISKBOOT}."
    fi
    
    if ! command -v lz4 &> /dev/null; then
        print_msg "$RED" "lz4 is not installed. Please run:"
        print_msg "$RED" "sudo apt install lz4 -y"
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "lz4 is installed."
    fi
    
    if [ ! -f "${PARENTDIR}/boot-repacked.img" ]; then
        print_msg "$RED" "Missing boot-repacked.img in ${PARENTDIR}!"
        exit 1
    else
        print_msg "$GREEN" "boot-repacked.img found."
    fi
    
    print_msg "$GREEN" "Environment checks completed successfully.\n"
}

# Perform KernelSU patching
ksud_patch() {
    print_msg "$GREEN" "Starting KernelSU patching process..."
    
    if [ ! -f "${KERNELPATH}/Image" ]; then
        print_msg "$RED" "Kernel image not found!"
        exit 1
    else
        print_msg "$GREEN" "Kernel image detected, copying to workspace..."
        cp -f "${KERNELPATH}/Image" "${KERNELPATH}/kernel"
    fi
    
    print_msg "$GREEN" "Applying KernelSU patch..."
    $KSUD boot-patch -b "${PARENTDIR}/boot-repacked.img" --magiskboot "${MAGISKBOOT}" --kernel "${KERNELPATH}/kernel" --kmi android12-5.10
    
    print_msg "$GREEN" "KernelSU patch applied. Locating patched images..."
    
    patchedfiles=$(ls $PARENTDIR/kernelsu_patched_*.img)
    
    IFS=$'\n' sorted=($(sort -r <<<"${patchedfiles[*]}"))
    unset IFS
    
    latest_kernesu_patched="${sorted[0]}"
    
    print_msg "$GREEN" "Latest patched KernelSU image: ${latest_kernesu_patched}"
    
    print_msg "$GREEN" "Signing boot image..."
    
    python3 "${AVBTOOL}" add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image $latest_kernesu_patched --algorithm SHA256_RSA4096 --key "${WORKSPACE}/sign.pk8"
    
    ## Alternative options to sign the boot image
    #python3 "${AVBTOOL}" add_hash_footer --partition_name boot --partition_size $(wc -c $latest_kernesu_patched | cut -f 1 -d ' ') --image $latest_kernesu_patched --algorithm SHA256_RSA4096 --key "${WORKSPACE}/sign.pk8"
    #$MAGISKBOOT sign $latest_kernesu_patched "${WORKSPACE}/sign.pem"
    print_msg "$GREEN" "Boot image signed successfully."
    
    print_msg "$GREEN" "KernelSU patching completed successfully!\n"
}

# Execute functions
checks
ksud_patch
