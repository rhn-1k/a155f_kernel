#!/bin/bash
# SPDX-License-Identifier: GPL-3.0

# Configuration
SCRIPTDIR=$(dirname "$_")
PARENTDIR=$(realpath "${SCRIPTDIR}/..")
BINDIR=$(realpath "${SCRIPTDIR}/bin")
MAGISKBOOT=$BINDIR/magiskboot
KSUD=$BINDIR/ksud-x86_64-unknown-linux-musl
AVBTOOL=$BINDIR/avb/avbtool.py
KERNELPATH=$PARENTDIR/out/target/product/a15/obj/KERNEL_OBJ/kernel-5.10/arch/arm64/boot/
WORKSPACE=$BINDIR/workspace
CERTDIR=$BINDIR/certs

# Color Variables
RED="\e[1;31m"
GREEN="\e[1;32m"
RESET="\e[0m"

# Print message function
print_msg() {
    local COLOR=$1
    shift
    echo -e "${COLOR}$*${RESET}"
}

# Script header
print_msg "$GREEN" "\n - Boot image repack script for Samsung kernel image - "
print_msg "$RED" "       by poqdavid \n"

# Check requirements and environment
checks() {
    print_msg "$GREEN" "Starting environment checks..."
    
    if [ ! -d "${WORKSPACE}" ]; then
        print_msg "$GREEN" "WORKSPACE directory not found. Creating directory at ${WORKSPACE}..."
        cd $BINDIR
        mkdir workspace > /dev/null 2>&1
        cd $PARENTDIR
        print_msg "$GREEN" "WORKSPACE directory created."
    else
        print_msg "$GREEN" "WORKSPACE directory exists."
    fi
    
    print_msg "$GREEN" "Cleaning up WORKSPACE directory..."
    rm -rf $WORKSPACE/*
    print_msg "$GREEN" "WORKSPACE cleaned."

    if [ ! -d "${CERTDIR}" ]; then
        print_msg "$GREEN" "CERTS directory not found. Creating directory at ${CERTDIR}..."
        cd $BINDIR
        mkdir certs > /dev/null 2>&1
        cd $PARENTDIR
        print_msg "$GREEN" "CERTS directory created."
    else
        print_msg "$GREEN" "CERTS directory exists."
    fi
    
    if [ ! -d "${KERNELPATH}" ]; then
        print_msg "$RED" "Kernel path not found: ${KERNELPATH}"
        print_msg "$RED" "Aborting environment checks..."
        exit 1
    else
        print_msg "$GREEN" "Kernel path found: ${KERNELPATH}"
    fi
    
    if [ ! -f "${KSUD}" ]; then
        print_msg "$RED" "KSUD not found: ${KSUD}"
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "Found KSUD at ${KSUD}."
    fi
    
    if [ ! -f "${MAGISKBOOT}" ]; then
        print_msg "$RED" "Magiskboot not found: ${MAGISKBOOT}"
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "Found MAGISKBOOT at ${MAGISKBOOT}."
    fi
    
    if ! command -v lz4 &> /dev/null; then
        print_msg "$RED" "lz4 is not installed. Please run:"
        print_msg "$RED" "sudo apt install lz4 -y"
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "lz4 is installed."
    fi
    
    if ! command -v python3 &> /dev/null; then
        print_msg "$RED" "python3 is not installed. Please run:"
        print_msg "$RED" "sudo apt install python3 -y"
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "python3 is installed."
    fi
    
    # Uncompress if needed
    if [ -f "${PARENTDIR}/boot.img.lz4" ]; then
        print_msg "$GREEN" "Found boot.img.lz4. Decompressing now..."
        lz4 -B6 --content-size -f boot.img.lz4 boot.img
        print_msg "$GREEN" "Decompression complete."
    else
        print_msg "$GREEN" "No compressed boot image detected."
    fi

    # Check if boot image is available
    if [ ! -f "${PARENTDIR}/boot.img" ]; then
        print_msg "$RED" "boot.img not found in ${PARENTDIR}!"
        print_msg "$RED" "Please place your boot.img in ${PARENTDIR}."
        print_msg "$RED" "Aborting..."
        exit 1
    else
        print_msg "$GREEN" "boot.img is available."
    fi
    print_msg "$GREEN" "Environment checks completed successfully.\n"
}

# Unpacking the boot.img
unpack() {
    print_msg "$GREEN" "Generating a signing key (if not already present)..."
    if [ ! -f $CERTDIR/sign.pub.bin ]; then
        openssl req -new -x509 -newkey rsa:4096 -keyout $CERTDIR/sign.pk8 -out $CERTDIR/sign.pem -days 824 -nodes -sha256 -config $BINDIR/samsung_cert.conf
        print_msg "$GREEN" "Signing key generated successfully."
    else
        print_msg "$GREEN" "Signing key already exists. Skipping generation."
    fi
    
    print_msg "$GREEN" "Extracting public key from the signing key..."
    python3 "${AVBTOOL}" extract_public_key --key $CERTDIR/sign.pk8 --output $CERTDIR/sign.pub.bin
    print_msg "$GREEN" "Public key extracted successfully."
    
    print_msg "$GREEN" "Starting unpacking of boot.img..."
    cd $WORKSPACE
    $MAGISKBOOT unpack -n "${PARENTDIR}/boot.img"
    rm kernel
    cd $PARENTDIR
    print_msg "$GREEN" "Boot image unpacked successfully."
    
    print_msg "$GREEN" "Returning to parent directory..."
}

# Repacking the Kernel image to boot.img
repack() {
    if [ ! -f "${KERNELPATH}/Image" ]; then
        print_msg "$RED" "No Kernel Image found in ${KERNELPATH}!"
        print_msg "$RED" "Aborting repack process..."
        exit 1
    else
        print_msg "$GREEN" "Kernel Image found. Copying to temporary file..."
        cp -f "${KERNELPATH}/Image" "${WORKSPACE}/kernel"
        print_msg "$GREEN" "Kernel Image copied successfully."
        
        # Repacking boot image
        print_msg "$GREEN" "Starting repacking of boot image..."
        cd $WORKSPACE
        $MAGISKBOOT repack "${PARENTDIR}/boot.img" "${WORKSPACE}/new-boot.img"
        cd $PARENTDIR
        print_msg "$GREEN" "Boot image repacked into new-boot.img."

        cp -f $WORKSPACE/new-boot.img $WORKSPACE/new-boot-signed.img
        print_msg "$GREEN" "Boot image Copied to ${WORKSPACE}/new-boot-signed.img."
        
        mv $WORKSPACE/new-boot.img $PARENTDIR/boot-repacked.img
        print_msg "$GREEN" "Repacked boot image moved to ${PARENTDIR}/boot-repacked.img."
        
        print_msg "$GREEN" "Signing boot image..."
        python3 "${AVBTOOL}" add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image $WORKSPACE/new-boot-signed.img --algorithm SHA256_RSA4096 --key $CERTDIR/sign.pk8
        
        ## Alternative options to sign the boot image
        #python3 "${AVBTOOL}" add_hash_footer --partition_name boot --partition_size $(wc -c $WORKSPACE/new-boot-signed.img | cut -f 1 -d ' ') --image $WORKSPACE/new-boot-signed.img --algorithm SHA256_RSA4096 --key $CERTDIR/sign.pk8
        #$MAGISKBOOT sign $WORKSPACE/new-boot-signed.img $CERTDIR/sign.pem
        print_msg "$GREEN" "Boot image signed successfully."
        
        mv $WORKSPACE/new-boot-signed.img $PARENTDIR/boot-repacked-signed.img
        print_msg "$GREEN" "Repacked boot image moved to ${PARENTDIR}/boot-repacked-signed.img."
        
        print_msg "$GREEN" "Repacking process completed successfully.\n"
    fi
}

# Execute all functions
checks
unpack
repack
